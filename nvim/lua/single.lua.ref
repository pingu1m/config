local plugins = {
    -------------------------------------------------------------------

    -- P0
    -- LSN Language server easy setup.
    {
        'VonHeikemen/lsp-zero.nvim',
        branch = 'v2.x',
        dependencies = {
            -- LSP Support
            {'neovim/nvim-lspconfig'},             -- Required
            {                                      -- Optional
                'williamboman/mason.nvim',
                build = function()
                pcall(vim.cmd, 'MasonUpdate')
                end,
            },
            {'williamboman/mason-lspconfig.nvim'}, -- Optional
        
            -- Autocompletion
            {'hrsh7th/nvim-cmp'},         -- Required
            {'hrsh7th/cmp-nvim-lsp'},     -- Required
            {'hrsh7th/cmp-buffer'},       -- Optional
            {'hrsh7th/cmp-path'},         -- Optional
            {'hrsh7th/cmp-nvim-lua'},     -- Optional
            -- {'saadparwaiz1/cmp_luasnip'}, -- Optional

        -- Snippets
            {'L3MON4D3/LuaSnip'},             -- Required
            {'rafamadriz/friendly-snippets'}, -- Optional
            {'L3MON4D3/LuaSnip'},     -- Required
        },
        config = function()
            local lsp = require('lsp-zero').preset({
            name = 'minimal',
            set_lsp_keymaps = true,
            manage_nvim_cmp = true,
            suggest_lsp_servers = false,
            })

            lsp.nvim_workspace()

            lsp.ensure_installed({
            'tsserver',
            'rust_analyzer',
            'pyright',
            'lua_ls',
            })

            lsp.setup()
        end
    },
    { "nvim-telescope/telescope.nvim",
        branch = "0.1.x",
        dependencies = "nvim-lua/plenary.nvim",
        -- keys = {
        --     { "<C-t>", "<CMD>Telescope<CR>", mode = { "n", "i", "v" } },
        --     { "<C-p>", "<CMD>Telescope find_files<CR>", mode = { "n", "i", "v" } },
        --     { "<C-l>", "<CMD>Telescope live_grep<CR>", mode = { "n", "i", "v" } },
        --     { "<C-c>", "<CMD>Telescope commands<CR>", mode = { "n", "i", "v" } },
        --     { "<C-k>", "<CMD>Telescope keymaps<CR>", mode = { "n", "i", "v" } },
        --     { "<C-s>", "<CMD>Telescope grep_string<CR>", mode = { "n", "i", "v" } },
        -- },
        config = function()
            local builtin = require('telescope.builtin')
            vim.keymap.set('n', '<leader>pf', builtin.find_files, {})
            vim.keymap.set('n', '<C-p>', builtin.git_files, {})
            vim.keymap.set('n', '<leader>pg', builtin.live_grep, {})
            vim.keymap.set('n', '<leader>pb', builtin.buffers, {})
            vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})
            vim.keymap.set('n', '<leader>ps', function()
                builtin.grep_string({ search = vim.fn.input("Grep > ") });
            end)
        end
    },
    -- Treesitter
    { "nvim-treesitter/nvim-treesitter",
        build = ":TSUpdate",
        config = function()
            require("nvim-treesitter.configs").setup {
                ensure_installed = { "typescript", "javascript", "rust", "python", "lua", "vim", "help", "query" },

                -- Install parsers synchronously (only applied to `ensure_installed`)
                sync_install = false,

                -- Automatically install missing parsers when entering buffer
                -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
                auto_install = true,

                 -- A list of parser names, or "all" (the five listed parsers should always be installed)
                highlight = {
                    enable = true,

                    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
                    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
                    -- Using this option may slow down your editor, and you may see some duplicate highlights.
                    -- Instead of true it can also be a list of languages
                    additional_vim_regex_highlighting = false,
                },
            }
        end },
    -- lsp saga
    {
        "glepnir/lspsaga.nvim",
        event = "LspAttach",
        -- main = "lspsaga",
        -- config= true,
        config = function()
            require("lspsaga").setup({})
        end,
        dependencies = {
        {"nvim-tree/nvim-web-devicons"},
        --Please make sure you install markdown and markdown_inline parser
        {"nvim-treesitter/nvim-treesitter"}
        }
    },
    { 'simrat39/rust-tools.nvim'
        , config = function()
            local rt = require("rust-tools")
            rt.setup({
                server = {
                    on_attach = function(_, bufnr)
                    -- Hover actions
                    vim.keymap.set("n", "<C-space>", rt.hover_actions.hover_actions, { buffer = bufnr })
                    -- Code action groups
                    vim.keymap.set("n", "<Leader>a", rt.code_action_group.code_action_group, { buffer = bufnr })
                    end,
                },
            })
        end,
    },
    -------------------------------------------------------------------
    -- Colorschemes
    {
        'Mofiqul/dracula.nvim',
    },
    -- { "sainnhe/everforest",
    --     config = function()
    --         vim.opt.termguicolors = true
    --         vim.g.everforest_background = "hard"
    --         vim.g.everforest_disable_italic_comment = true
    --         vim.cmd.colorscheme("everforest")
    -- end },
    -- Colorscheme
    {
        "folke/tokyonight.nvim",
        lazy = false, -- make sure we load this during startup if it is your main colorscheme
        priority = 1000, -- make sure to load this before all the other start plugins
        config = function()
          -- load the colorscheme here
          vim.cmd([[colorscheme tokyonight]])
        end,
    },
    { 
        'rose-pine/neovim', 
        name = 'rose-pine',
        lazy = true, -- make sure we load this during startup if it is your main colorscheme
        -- priority = 1000, -- make sure to load this before all the other start plugins
        config = function()
            -- vim.cmd([[colorscheme rose-pine]])
        end,
    },

    -------------------------------------------------------------------
    -- UI components
    { 
        "lukas-reineke/indent-blankline.nvim" ,
        config = function()
            -- require("indent_blankline").setup {
            --     -- for example, context is off by default, use this to turn it on
            --     show_current_context = true,
            --     show_current_context_start = true,
            -- }

            -- vim.opt.list = true
            -- vim.opt.listchars:append "eol:↴"

            -- require("indent_blankline").setup {
            --     show_end_of_line = true,
            -- }

            -- vim.opt.list = true
            -- vim.opt.listchars:append "space:⋅"
            -- vim.opt.listchars:append "eol:↴"

            -- require("indent_blankline").setup {
            --     show_end_of_line = true,
            --     space_char_blankline = " ",
            -- }

            -- vim.opt.termguicolors = true
            -- vim.cmd [[highlight IndentBlanklineIndent1 guifg=#E06C75 gui=nocombine]]
            -- vim.cmd [[highlight IndentBlanklineIndent2 guifg=#E5C07B gui=nocombine]]
            -- vim.cmd [[highlight IndentBlanklineIndent3 guifg=#98C379 gui=nocombine]]
            -- vim.cmd [[highlight IndentBlanklineIndent4 guifg=#56B6C2 gui=nocombine]]
            -- vim.cmd [[highlight IndentBlanklineIndent5 guifg=#61AFEF gui=nocombine]]
            -- vim.cmd [[highlight IndentBlanklineIndent6 guifg=#C678DD gui=nocombine]]

            -- vim.opt.list = true
            -- vim.opt.listchars:append "space:⋅"
            -- vim.opt.listchars:append "eol:↴"

            -- require("indent_blankline").setup {
            --     space_char_blankline = " ",
            --     char_highlight_list = {
            --         "IndentBlanklineIndent1",
            --         "IndentBlanklineIndent2",
            --         "IndentBlanklineIndent3",
            --         "IndentBlanklineIndent4",
            --         "IndentBlanklineIndent5",
            --         "IndentBlanklineIndent6",
            --     },
            -- }

            vim.opt.termguicolors = true
            vim.cmd [[highlight IndentBlanklineIndent1 guibg=#1f1f1f gui=nocombine]]
            vim.cmd [[highlight IndentBlanklineIndent2 guibg=#1a1a1a gui=nocombine]]

            require("indent_blankline").setup {
                char = "",
                char_highlight_list = {
                    "IndentBlanklineIndent1",
                    "IndentBlanklineIndent2",
                },
                space_char_highlight_list = {
                    "IndentBlanklineIndent1",
                    "IndentBlanklineIndent2",
                },
                show_trailing_blankline_indent = false,
            }

            -- vim.opt.list = true
            -- vim.opt.listchars:append "space:⋅"
            -- vim.opt.listchars:append "eol:↴"

            -- require("indent_blankline").setup {
            --     space_char_blankline = " ",
            --     show_current_context = true,
            --     show_current_context_start = true,
            -- }
        end
    },
    -- Lualine information / Status bar
    { "nvim-lualine/lualine.nvim",
        dependencies = "nvim-tree/nvim-web-devicons",
        enabled = true,
        opts= {
            options = {
                theme = 'onedark'
                -- ... your lualine config
            }
        },
        config = true },

    -- File explorer
    { 'nvim-tree/nvim-tree.lua',
        enabled = false,
        dependencies = {
            'nvim-tree/nvim-web-devicons', -- optional, for file icons
        },
        config = function() 
            -- empty setup using defaults
            require("nvim-tree").setup({
            open_on_setup = true,
            ignore_buffer_on_setup = true,
            })
            -- fetch keymap
            local map = vim.api.nvim_set_keymap

            -- map the key n to run the command :NvimTreeToggle
            map('n', 'n', [[:NvimTreeToggle<CR>]], {})
            -- map('n', '<C-d>', [[:NvimTreeToggle<CR> :lua require'dapui'.toggle()<CR>]], {})
        end
    },

    { "nvim-neo-tree/neo-tree.nvim",
        enabled = true,
        dependencies = {
            "nvim-lua/plenary.nvim",
            "nvim-tree/nvim-web-devicons",
            "MunifTanjim/nui.nvim"
        },
        keys = {
            { "<C-b>", "<CMD>Neotree toggle<CR>", mode = { "n", "i", "v" } }
        },
        config = true },

    -- Alpha (Dashboard)
    {
        "goolord/alpha-nvim",
        -- lazy = true,
        config = function()
            require'alpha'.setup(require'alpha.themes.startify'.config)
            -- require'alpha'.setup(require'alpha.themes.dashboard'.config)
        end
    },
    'lewis6991/impatient.nvim',
    {
        "nvim-telescope/telescope-file-browser.nvim",
        dependencies = { "nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim" },
        config = function()
            -- You don't need to set any of these options.
            -- IMPORTANT!: this is only a showcase of how you can set default options!
            require("telescope").setup {
                extensions = {
                file_browser = {
                    theme = "ivy",
                    -- disables netrw and use telescope-file-browser in its place
                    hijack_netrw = true,
                    mappings = {
                    ["i"] = {
                        -- your custom insert mode mappings
                    },
                    ["n"] = {
                        -- your custom normal mode mappings
                    },
                    },
                },
                },
            }
            -- To get telescope-file-browser loaded and working with telescope,
            -- you need to call load_extension, somewhere after setup function:
            require("telescope").load_extension "file_browser"

            vim.api.nvim_set_keymap(
            "n",
            "<space>fb",
            ":Telescope file_browser",
            { noremap = true }
            )

            -- open file_browser with the path of the current buffer
            vim.api.nvim_set_keymap(
            "n",
            "<space>fb",
            ":Telescope file_browser path=%:p:h select_buffer=true",
            { noremap = true }
            )

        end
    },

    -- Bufferline
    {
        'akinsho/bufferline.nvim',
        dependencies = {
            'nvim-tree/nvim-web-devicons'
        },
        config = true,
    },
    -- Terminal usage
    { "akinsho/toggleterm.nvim",
        config = { open_mapping = [[<c-\>]], direction = "tab" } },

    -------------------------------------------------------------------
    -- Improved navigation
    { "fedepujol/move.nvim",
    keys = {
        { "<A-Down>", ":MoveLine(1)<CR>", mode = { "n" } },
        { "<A-Up>", ":MoveLine(-1)<CR>", mode = { "n" } },
        { "<A-Down>", ":MoveBlock(1)<CR>", mode = { "v" } },
        { "<A-Up>", ":MoveBlock(-1)<CR>", mode = { "v" } },
        { "<A-Down>", "<C-\\><C-N>:MoveLine(1)<CR>i", mode = { "i" } },
        { "<A-Up>", "<C-\\><C-N>:MoveLine(-1)<CR>i", mode = { "i" } },
    } },
    -- Hop (Better Navigation)
    {
        "phaazon/hop.nvim",
        lazy = true,
        config = function()
            -- hop.nvim
            require'hop'.setup({
                keys = 'etovxqpdygfblzhckisuran'
            })

            -- place this in one of your configuration file(s)
            -- local hop = require('hop')
            -- local directions = require('hop.hint').HintDirection
            -- vim.keymap.set('', 'f', function()
            -- hop.hint_char1({ direction = directions.AFTER_CURSOR, current_line_only = true })
            -- end, {remap=true})
            -- vim.keymap.set('', 'F', function()
            -- hop.hint_char1({ direction = directions.BEFORE_CURSOR, current_line_only = true })
            -- end, {remap=true})
            -- vim.keymap.set('', 't', function()
            -- hop.hint_char1({ direction = directions.AFTER_CURSOR, current_line_only = true, hint_offset = -1 })
            -- end, {remap=true})
            -- vim.keymap.set('', 'T', function()
            -- hop.hint_char1({ direction = directions.BEFORE_CURSOR, current_line_only = true, hint_offset = 1 })
            -- end, {remap=true})

            -- normal mode (easymotion-like)
            vim.api.nvim_set_keymap("n", "<Leader><Leader>b", "<cmd>HopWordBC<CR>", {noremap=true})
            vim.api.nvim_set_keymap("n", "<Leader><Leader>w", "<cmd>HopWordAC<CR>", {noremap=true})
            vim.api.nvim_set_keymap("n", "<Leader><Leader>j", "<cmd>HopLineAC<CR>", {noremap=true})
            vim.api.nvim_set_keymap("n", "<Leader><Leader>k", "<cmd>HopLineBC<CR>", {noremap=true})

            -- visual mode (easymotion-like)
            vim.api.nvim_set_keymap("v", "<Leader><Leader>w", "<cmd>HopWordAC<CR>", {noremap=true})
            vim.api.nvim_set_keymap("v", "<Leader><Leader>b", "<cmd>HopWordBC<CR>", {noremap=true})
            vim.api.nvim_set_keymap("v", "<Leader><Leader>j", "<cmd>HopLineAC<CR>", {noremap=true})
            vim.api.nvim_set_keymap("v", "<Leader><Leader>k", "<cmd>HopLineBC<CR>", {noremap=true})


            -- normal mode (sneak-like)
            vim.api.nvim_set_keymap("n", "s", "<cmd>HopChar2AC<CR>", {noremap=false})
            vim.api.nvim_set_keymap("n", "S", "<cmd>HopChar2BC<CR>", {noremap=false})

            -- visual mode (sneak-like)
            vim.api.nvim_set_keymap("v", "s", "<cmd>HopChar2AC<CR>", {noremap=false})
            vim.api.nvim_set_keymap("v", "S", "<cmd>HopChar2BC<CR>", {noremap=false})
        end
    },
    { "rcarriga/nvim-notify" },
    {
        "ggandor/leap.nvim",
        enabled = false,
        dependencies = {
            "tpope/vim-repeat",
            "ggandor/leap-ast.nvim"
        },
        config = function()
            require('leap').add_default_mappings()
            vim.keymap.set({'n', 'x', 'o'}, 'T', function() require'leap-ast'.leap() end, {})
        end
    },

    -------------------------------------------------------------------
    -- Git Diff
    -- gitui
    { "sindrets/diffview.nvim",
        dependencies = {
            "nvim-lua/plenary.nvim",
            { "TimUntersberger/neogit", config = { disable_commit_confirmation = true } },
        },
        commit = "9359f7b1dd3cb9fb1e020f57a91f8547be3558c6", -- HEAD requires git 2.31
        keys = {
            { "<C-g>", "<CMD>DiffviewOpen<CR>", mode = { "n", "i", "v" } }
        },
        config = {
            keymaps = {
                view = {
                    ["<C-g>"] = "<CMD>DiffviewClose<CR>",
                    ["c"] = "<CMD>DiffviewClose|Neogit commit<CR>",
                },
                file_panel = {
                    ["<C-g>"] = "<CMD>DiffviewClose<CR>",
                    ["c"] = "<CMD>DiffviewClose|Neogit commit<CR>",
                },
            },
        } 
    },
        
    
    ------------------------------------------------
    -- Extras - you can probably live without it
    -- Which-key
    {
        'folke/which-key.nvim',
        lazy = true,
    },
    {
        "folke/trouble.nvim",
        dependencies = "nvim-tree/nvim-web-devicons",
        config = function()
        require("trouble").setup {
            -- your configuration comes here
            -- or leave it empty to use the default settings
            -- refer to the configuration section below
        }
        end
    },
    {
        "folke/todo-comments.nvim",
        dependencies = "nvim-lua/plenary.nvim",
        config = function()
        require("todo-comments").setup {
            -- your configuration comes here
            -- or leave it empty to use the default settings
            -- refer to the configuration section below
        }
        end
    },
    { 'simrat39/symbols-outline.nvim'},
    {
        "windwp/nvim-autopairs",
        config = function() require("nvim-autopairs").setup {} end
    },
    {"folke/zen-mode.nvim"},
    -- -- {"github/copilot.vim"},
    { enabled= false, "eandrju/cellular-automaton.nvim"},
}

return plugins